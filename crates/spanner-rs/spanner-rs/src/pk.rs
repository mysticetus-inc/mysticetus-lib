//! [`PrimaryKey`] and other primary key related traits.
use crate::Table;
use crate::private::SealedToKey;

/// A trait for special types representing the primary key for a given spanner table.
pub trait PrimaryKey: Sized + Clone {
    type Table: Table<Pk = Self>;

    /// The parts of the primary key. The [`PkParts`] bound enforces that it should always be
    /// a tuple, with each tuple element being 1 component of the primary key (in order);
    type Parts: PkParts<Self::Table>;

    fn from_parts(parts: Self::Parts) -> Self;

    fn into_parts(self) -> Self::Parts;
}

/// Marker trait for types that may or may not be a fully qualified primary key.
/// Implementing types are exclusively tuples with elements that either implement [`IntoSpanner`],
/// or [()], which represents a missing/empty key column.
///
/// [`IntoSpanner`]: crate::IntoSpanner
pub trait PartialPkParts<T: Table>: SealedToKey {}

/// Implemented by types that can be turned into the parts of a partial primary key.
///
/// Mainly used to facilitate conversions from the primary key builders generated by the [`Table`]
/// proc macro.
///
/// [`Table`]: spanner_rs_macros::Table
pub trait IntoPartialPkParts<T: Table> {
    /// The tuple containing the partial (or fully qualified) primary key.
    type PartialParts: PartialPkParts<T>;

    fn into_partial_parts(self) -> Self::PartialParts;
}

/// Sealed, blanket impl for all [`PartialPkParts`] types.
impl<T: Table, P> IntoPartialPkParts<T> for P
where
    P: PartialPkParts<T>,
{
    type PartialParts = Self;

    #[inline]
    fn into_partial_parts(self) -> Self::PartialParts {
        self
    }
}

/// Blanket marker trait for a fully qualified primary key.
pub trait PkParts<T: Table>: PartialPkParts<T> {}

/// Blanket impl over all [`PartialPkParts`] where Self is the full Pk
impl<T: Table, P> PkParts<T> for P
where
    P: PartialPkParts<T>,
    T::Pk: PrimaryKey<Table = T, Parts = Self>,
{
}
